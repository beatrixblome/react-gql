{"version":3,"sources":["graphql/get-countries.js","components/Country/CountryList.js","containers/CountriesContainer.js","containers/SearchInput.js","assets/logo.png","containers/Header.js","App.js","reportWebVitals.js","index.js"],"names":["GET_COUNTRIES","gql","CountryList","country","useState","languageCode","setLanguageCode","firstLanguage","secondLanguage","uri","className","name","emoji","capital","languages","slice","map","language","type","value","onClick","e","code","console","log","style","visibility","width","window","open","renderGoogle","CountriesContainer","countries","SearchInput","useQuery","data","loading","error","searchLanguage","setSearchLanguage","filteredCountries","useMemo","lowerCaseSearch","toLocaleLowerCase","filter","reduce","p","match","message","handleSearch","a","preventDefault","onSubmit","onChange","target","Header","href","src","logo","alt","App","client","ApolloClient","cache","InMemoryCache","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e47a23d7.chunk.js","sourcesContent":["import gql from 'graphql-tag'\n\n export const GET_COUNTRIES = gql` \n   query countries($filter: CountryFilterInput) {\n     countries(filter : $filter) {\n         name\n         native\n         capital\n         emoji\n         languages{\n           code\n           name\n         }\n       }\n   }\n\n`\n\nexport const GET_LANGUAGES = gql` \nquery languages($filter: LanguageFilterInput) {\n  languages(filter: $filter) {\n        code\n        name\n      }\n}\n`\n\n// conntries can only filter code: currency continent\n// languages can only filter code\n// only for code","import React, { useState } from 'react';\n\nexport function CountryList({ country }) {\n\n    const [languageCode, setLanguageCode] = useState('')\n    const [firstLanguage, secondLanguage] = languageCode\n    \n    const renderGoogle = () => {\n        if (firstLanguage && secondLanguage && firstLanguage !== secondLanguage) {\n            return <input\n                visibility='hidden'\n                type='button'\n                key={`${firstLanguage}-${secondLanguage}`}\n                onClick={window.open(uri, \"_blank\")}\n            />\n           }        \n        }\n   \n\n    const uri = `https://translate.google.com/?sl=${firstLanguage}&tl=&${secondLanguage}&op=translate`\n\n\n    return (\n        <>\n            <ul className=\"country\">\n            <li className=\"country__name\">\n            <p>{country.name}</p>\n            </li>\n            <li className=\"country__emoji\">\n                <span>{country.emoji}</span>\n            </li>\n                {country.capital &&\n                    <li className=\"country__captial\">\n                    <span>{`Hauptstadt:  ${country.capital}`}</span>\n                </li>\n           } \n            <li className=\"country__languages\">\n                    {country.languages.slice(0, 3).map(language => (\n                                        <span\n                                        type='submit'\n                                        value={languageCode}\n                                        key={`${language.code}-${language.name}`}\n                                        onClick={(e) => {\n                                            setLanguageCode(language.code,...languageCode);\n                                            console.log(language.code)\n                                          }}\n                                    >  {language.name}                  \n                                    </span>\n                ))}\n                </li>\n                <li className=\"country__languageButton\">\n                {country.languages.slice(0, 1).map(language => (\n                    <button>                    \n                        <span>Sprache ausw√§hlen</span>\n                    <i className=\"icon-chevron-right\"></i>\n                    </button>\n                ))}\n            </li>\n            </ul>\n            <div style={{ visibility: 'hidden', width:'0px'}}>{renderGoogle()}</div> \n            </>\n    );\n}\n","\nimport React       from 'react';\nimport { CountryList } from '../components/Country/CountryList';\n\nexport function CountriesContainer({countries}) {\n    if ( ! countries.map ) return console.log(countries)\nreturn (\n<div>\n    <div className=\"container\">\n        { countries && countries.map(country => <CountryList key={country.name} country={country}/>)}\n    </div>\n</div> )}","import React, { useState, useMemo } from \"react\";\nimport { useQuery }                 from \"@apollo/client\";\nimport { GET_COUNTRIES }            from \"../graphql/get-countries\";\nimport { CountriesContainer }       from \"./CountriesContainer\";\n\nimport \"../styles/style.css\";\n\nexport function SearchInput() {\n\n    const { data, loading, error } = useQuery(GET_COUNTRIES);\n    const [searchLanguage, setSearchLanguage] = useState(\"\");\n\n    const filteredCountries = useMemo( () => {\n        const lowerCaseSearch = searchLanguage.toLocaleLowerCase();\n        if ( ! data ) return [];\n        if ( ! searchLanguage ) return data.countries;\n        return data.countries.filter( country => \n            country.languages.reduce( (p,language) => p || language.name.toLocaleLowerCase().match(lowerCaseSearch), false)\n        )\n        }\n    , [data,searchLanguage])\n\n\n    if ( loading || error ) {\n        return <p>{error ? error.message : \"Loading...\"}</p>;\n    }\n\n    if ( ! data ) return 'no data'\n\n    const handleSearch = async (e) => {\n        e.preventDefault();\n    };\n\n    return (\n    <div className=\"search__container\">\n        <div className=\"search__left\"></div>\n        <div className=\"triangle\"></div>\n        <form className=\"search__form\" onSubmit={handleSearch}>\n            <input\n                className=\"search__input\"\n                type=\"text\"\n                value={searchLanguage}\n                onChange={ e => setSearchLanguage(e.target.value) }\n            ></input>\n            <button type=\"submit\" className=\"search__button\">\n                <span>Suchen</span>\n                <i className=\"icon-chevron-right\"></i>\n            </button>\n        </form>\n        <div className=\"languages__list\">\n            <CountriesContainer countries={filteredCountries}/>\n        </div>\n    </div>\n  );\n}","export default __webpack_public_path__ + \"static/media/logo.3024eed4.png\";","import React from 'react';\nimport { BrowserRouter, Link} from 'react-router-dom';\nimport logo from '../assets/logo.png'\n\n\nexport const Header = () => {\n    return (\n        <div className=\"header\">\n          \n        <a href=\"/\" className=\"image__container\">\n        <img src={logo} alt=\"logo\"/>\n        </a>    \n        <div className=\"myContact\">\n            <ul>\n                <li><a>Mein Konto</a></li>\n                <li><a>Kundenservice</a></li>\n            </ul>\n        </div>\n\n       <div className=\"main__nav\">\n          <div className=\"menu__bar\" className=\"menu__bar\">\n            <a></a>\n            </div> \n                    <ul className=\"menu__container\">\n                        <li> <a>Mitmachen</a></li>\n                        <li> <a>So funktioniert's</a></li>\n                        <li> <a>Gewinne</a></li>\n                        <li> <a>Ergebnisse</a></li>\n                        <li> <a>Projekte</a></li>\n                        <li> <a>√úber uns</a></li>\n                    </ul>\n                    <div className=\"menu__bar\"></div> \n\n        {/* <Link to=\"/\">\n         Home\n        </Link>\n        <div className=\"ml1\">|</div>\n        <Link to=\"/projects\">\n          Projects\n        </Link>\n        <div className=\"ml1\">|</div>\n        <Link to=\"/aboutus\">\n          About Us\n        </Link>\n        <div className=\"ml1\">|</div>\n        <Link\n          to=\"/search\"\n        >\n          Search\n        </Link> */}\n\n                </div>\n       \n        </div>\n  );\n};\n\n","\nimport React              from 'react';\nimport ApolloClient       from 'apollo-boost';\nimport { InMemoryCache }  from '@apollo/client';\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { SearchInput }      from './containers/SearchInput'\nimport { Header }         from './containers/Header'\n\nimport './styles/style.css'\n\nexport default function App() {\n\n  const client = new ApolloClient({\n    uri: 'https://countries.trevorblades.com/',\n    cache: new InMemoryCache()\n  });\n\n  return (\n    <ApolloProvider client={client}> \n      <Header/>\n      <SearchInput/> \n    </ApolloProvider>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}